#!/usr/bin/perl
#
# Copyright (C) 2004 Ferenc Wagner
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# This program looks for builds that have received new reports. These are
# identified by the presence of a file matching data/*/outdated.
# It then creates an index.html file in the same directory and removes the
# outdated file.
#
# It is thus intended to run as a second stage invoked by the winetest.cron
# script. Races and concurrency problems must be dealt with on that higher
# level.
#
# Exit: 0 - successfully processed a build, call again
#       1 - should not happen
#       2 - there was nothing to do
#       3 - fatal error, something went utterly wrong

use strict;
use warnings;
use CGI qw(:standard);
charset("utf-8");

sub BEGIN
{
    if ($0 !~ m=^/=)
    {
        # Turn $0 into an absolute path so it can safely be used in @INC
        require Cwd;
        $0 = Cwd::cwd() . "/$0";
    }
    unshift @INC, $1 if ($0 =~ m=^(/.*)/[^/]+$=);
}
use vars qw/$workdir $gitdir $gitweb/;
require "winetest.conf";

my $name0=$0;
$name0 =~ s+^.*/++;

# We support summary files version 4 and up
my $summary_version=4;


#
# Common helpers
#

sub error(@)
{
    print STDERR "$name0:error: ", @_;
}

$ENV{GIT_DIR} = $gitdir;

sub get_build_info($)
{
    my ($build) = @_;
    my ($date, $subject);

    my $commit = `git log --max-count=1 --pretty="format:%ct %s" "$build^0" 2>/dev/null` if ($build =~ /^[0-9a-f]{40}$/);
    if ($commit && $commit =~ /^(\d+) (.*)$/)
    {
        ($date, $subject) = ($1, $2);
        # Make sure the directory's mtime matches the commit time
        utime $date, $date, "data/$build";
    }
    else
    {
        $date = (stat "data/$build")[9];
        $subject = "";
    }
    return ($date, $subject);
}

use POSIX qw(locale_h strftime);
setlocale(LC_ALL, "C");

sub short_date($)
{
    my ($date) = @_;
    return strftime("%b&nbsp;%d", gmtime($date));
}


# A test name is of the form 'dll:unit' where:
#  dll           Is the dll being tested.
#  unit          Is a unit test composed of multiple individual checks testing
#                  one aspect of the dll functionality.
#
# Unit test result container:
#
# A unit test result container contains the results of one or multiple runs
# of a given unit test.
#
#  status        A string indicating the status of the result: whether it ran,
#                  crashed, etc.
#  count         The minimum and maximum number of checks performed.
#  errors        The minimum and maximum number of errors.
#  todos         The minimum and maximum number of todos.
#  skips         The minimum and maximum number of skips.
#  omit          If set then this result can be omitted from the group table.
#                  Only used for group results.
#
# Report result containers:
#  tag           The report's tag.
#  dir           The directory containing the report data (log files, etc).
#  group         A reference to the group the report belongs to.
#  dllmissing    A hash of the missing dlls for that system.
#  filelimit     The name of the last test that was run before the report file
#                  size limit was reached.
#  <testname>    Maps the test names to a structure containing the individual
#                  unit test's results. Note that there's no name collision
#                  with the other fields because the test names contain a ':'.
#  errors        The number of unit tests with errors.
#  todos         The number of unit tests with no error but todos.
#
# Group result containers:
#  name          Group name.
#  reports       An array of report result containers.
#  <testname>    Maps the test names to a structure containing the merged
#                  result of the group's reports for that unit test. Note that
#                  there's no name collision with the other fields because the
#                  test names contain a ':'.
#  errors        The number of unit tests with errors.
#  todos         The number of unit tests with no error but todos.

# This should match the definitions in build-index

my %w95     = (name => "Win95");
my %w98     = (name => "Win98");
my %me      = (name => "Me");
my %nt3     = (name => "NT3");
my %nt4     = (name => "NT4");
my %w2k     = (name => "2000");
my %xp      = (name => "XP");
my %w2k3    = (name => "2003");
my %vista   = (name => "Vista");
my %w2k8    = (name => "2008");
my %win7    = (name => "Win7");
my %win8    = (name => "Win8");
my %win10   = (name => "Win10");
my %unknown = (name => "Other");
my %linux   = (name => "Linux");
my %mac     = (name => "Mac");
my %bsd     = (name => "BSD");
my %solaris = (name => "Solaris");
my %wine    = (name => "Wine");

# Define the order of version groups in the summary
my @groups = (\%w95, \%w98, \%me, \%nt3, \%nt4, \%w2k, \%xp, \%w2k3, \%vista, \%w2k8, \%win7, \%win8, \%win10,
              \%unknown, \%linux, \%mac, \%bsd, \%solaris, \%wine);

# Map dissect's IDs to the above hashes
my %idmap = (95=>\%w95, 98=>\%w98, me=>\%me, nt3=>\%nt3, nt4=>\%nt4, 2000=>\%w2k,
             xp=>\%xp, 2003=>\%w2k3, vista=>\%vista, 2008=>\%w2k8, win7=>\%win7, win8=>\%win8, win10=>\%win10,
             unknown=>\%unknown, wine=>\%wine, linux=>\%linux, mac=>\%mac, bsd=>\%bsd,
             solaris=>\%solaris);


#
# Command line processing
#

my ($update, $builddir, $usage);

sub check_opt_val($$)
{
    my ($option, $val) = @_;

    if (defined $val)
    {
        error("$option can only be specified once\n");
        $usage = 2; # but continue processing this option
    }
    if (!@ARGV)
    {
        error("missing value for $option\n");
        $usage = 2;
        return undef;
    }
    return shift @ARGV;
}

while (@ARGV)
{
    my $arg = shift @ARGV;
    if ($arg eq "--workdir")
    {
        $workdir = check_opt_val($arg, $workdir);
    }
    elsif ($arg eq "--update")
    {
        $builddir = check_opt_val($arg, $builddir);
        $update = 1;
    }
    elsif ($arg eq "--help")
    {
        $usage = 0;
    }
    else
    {
        error("unknown argument '$arg'\n");
        $usage = 1;
    }
}
if (!defined $usage)
{

    if (!defined $workdir)
    {
        require Cwd;
        $workdir = Cwd::cwd();
    }
    elsif ($workdir !~ m%^/%)
    {
        require Cwd;
        $workdir = Cwd::cwd() . "/$workdir";
    }
    if (!-f "$workdir/report.css")
    {
        error("'$workdir' is not a valid work directory\n");
        $usage = 2;
    }
    if (defined $builddir and !-f "$builddir/summary.txt")
    {
        error("the '$builddir' build directory is not valid\n");
        $usage = 1;
    }
}
if (defined $usage)
{
    if ($usage)
    {
        error("try '$name0 --help' for more information\n");
        exit $usage;
    }
    print "Usage: $name0 [--workdir DIR] [--update BUILDDIR] [--help]\n";
    print "\n";
    print "Processes a build's report summaries to create the build's index files.\n";
    print "\n";
    print "Where:\n";
    print "  --workdir DIR     Specifies the directory containing the winetest website\n";
    print "                    files.\n";
    print "  --update BUILDDIR Updates the HTML files of the specified build directory.\n";
    print "  --help          Shows this usage message.\n";
    exit 0;
}

chdir($workdir) or die "could not chdir to the work directory: $!";

if (!defined $builddir)
{
    ($builddir, undef) = glob "data/*/outdated";
    exit 2 if (!defined $builddir);
    $builddir =~ s~/outdated$~~;
}
if ($builddir !~ s~^(?:\Q$workdir\E/+)?data/+([0-9a-f]{40})/?$~data/$1~)
{
    error("the '$builddir' build directory is not valid\n");
    exit 1;
}
my $build = $1;
my ($date, $_subject) = get_build_info($build);


#
# Read the summaries of all the build's reports
#

my %alltests;                   # union of test names
foreach my $file (glob "$builddir/*/summary.txt") {
    (my $dir = $file) =~ s|^$builddir/(.*?)/summary.txt$|$1|;
    (my $id, my @tag) = split /_/, $dir;
    my $group = $idmap{$id};
    if (!defined $group) {
        error("unknown architecture '$id' in '$file'\n");
        next;
    }

    my $report = { group => $group};
    $report->{tag} = @tag?"@tag":"";
    $report->{dir} = $dir;
    if (!open TEST, "<$file") {
        error("could not open '$file' for reading: $!\n");
        next;
    }
    if (($_ = <TEST>) ne "Version $summary_version\n") {
        error("wrong header in '$file': $_\n");
        close TEST;
        next;
    }

    while (<TEST>) {
        next if /^Archive: /;
        my ($dummy, $dll, $unit, $count, $todos, $errors, $skips,
            $source, $rev) = split;
        my $testname = "$dll:$unit";

        if ($count eq "missing")
        {
            $report->{dllmissing}->{$dll} = "dll missing";
            next;
        }
        if ($unit eq "-" and $count eq "skipped")
        {
            $report->{dllmissing}->{$dll} = "skipped";
            next;
        }

        $alltests{$testname} = $source;

        if ($count eq "failed") {
            if ($todos eq "crash") {
                $report->{$testname} = { status => "crash" };
            } elsif ($todos eq "filelimit") {
                $report->{$testname} = { status => "file limit" };
                $report->{filelimit} = $testname;
            } else {
                $report->{$testname} = { status => $todos };
            }
        } elsif ($count eq "skipped") {
            $report->{$testname} = { status => "skipped",
                                     count  => [ 1, 1 ],
                                     skips  => [ 1, 1 ]
                                   };
        } else {
            $report->{$testname} = { status => "run",
                                     count  => [ $count, $count ],
                                     errors => [ $errors, $errors ],
                                     todos  => [ $todos, $todos ],
                                     skips  => [ $skips, $skips ]
                                   };
        }
        $report->{$testname}->{testname} = $testname;
    }
    close TEST;

    push @{$group->{reports}}, $report;
}


#
# Merge the test results
#

sub merge_min_max($$$)
{
    my ($merged, $result, $field)=@_;
    return if (!exists $result->{$field});

    if (!exists $merged->{$field}) {
        $merged->{$field}=[ @{$result->{$field}} ];
    } else {
        if ($merged->{$field}->[0] > $result->{$field}->[0])
        {
            $merged->{$field}->[0] = $result->{$field}->[0];
        }
        if ($merged->{$field}->[1] < $result->{$field}->[1])
        {
            $merged->{$field}->[1] = $result->{$field}->[1];
        }
    }
}

sub merge_status($$)
{
    my ($group_result, $result) = @_;
    if (!defined $group_result->{status}) {
        $group_result->{status} = $result->{status};
    } elsif ($group_result->{status} eq "skipped") {
        $group_result->{status} = $result->{status};
    } elsif ($result->{status} eq "skipped") {
        ; # Nothing to do
    } elsif ($group_result->{status} eq "dll missing" and
             $result->{status} eq "run") {
        $group_result->{status} = "run";
    } elsif ($group_result->{status} eq "run" and
             $result->{status} eq "dll missing") {
        ; # Nothing to do
    } elsif ($group_result->{status} ne $result->{status}) {
        $group_result->{status} = "mixed";
    }

    if (defined $result->{count}) {
        merge_min_max($group_result, $result, "count");
        merge_min_max($group_result, $result, "errors");
        merge_min_max($group_result, $result, "todos");
        merge_min_max($group_result, $result, "skips");
    }
}

# Find missing tests. After this exercise all test results (correct, failed
# and missing) are available for all reports.
my %test_results;
foreach my $group (@groups) {
    next unless exists $group->{reports};
    $group->{group}=$group;
    foreach my $testname (sort keys %alltests) {
        my $group_result = {};
        foreach my $report (@{$group->{reports}}) {
            if (!exists $report->{$testname}) {
                my ($dll, $unit) = split(/:/, $testname);
                my $filelimit = $report->{filelimit};
                if (exists $report->{dllmissing}->{$dll}) {
                    # Mark this test as missing because of a missing dll
                    $report->{$testname} = { status => $report->{dllmissing}->{$dll},
                                             count  => [ 1, 1 ],
                                             skips  => [ 1, 1 ]
                                           };
                } elsif (defined $filelimit && $testname gt $filelimit) {
                    # Mark this test as missing because of a partial report file
                    $report->{$testname}->{status} = "filelimit";
                } else {
                    # Mark this test as missing for an unknown reason
                    $report->{$testname}->{status} = "missing";
                }
            }
            $test_results{$testname} = { } unless defined $test_results{$testname};
            $test_results{$testname}->{global} = { } unless defined $test_results{$testname}->{global};
            $test_results{$testname}->{$group->{name}} = { } unless defined $test_results{$testname}->{$group->{name}};
            merge_status( $group_result, $report->{$testname} );
            merge_status( $test_results{$testname}->{global}, $report->{$testname} );
            merge_status( $test_results{$testname}->{$group->{name}}, $report->{$testname} );
        }
        $group->{$testname} = $group_result;
        if ($group_result->{status} eq "dll missing" or
            $group_result->{status} eq "skipped" or
            ($group_result->{status} eq "run" and
             $group_result->{errors}->[1] == 0 and
             $group_result->{todos}->[1] == 0 and
             $group_result->{skips}->[1] == 0))
        {
            # No errors and no todos so we can omit this result
            # from the group table
            $group_result->{omit} = 1;
        }
    }
}

# Compute some statistics

foreach my $group (@groups) {
    next unless exists $group->{reports};
    foreach my $report (@{$group->{reports}}, $group) {
        $report->{errors} = 0;
        $report->{successes} = 0;
        $report->{todos} = 0;
        $report->{runs} = 0;
        foreach my $testname (sort keys %alltests) {
            my $result = $report->{$testname};
            if ($result->{status} !~ /^(?:dll missing|run|skipped)$/ or
                ($result->{status} eq "run" and
                 $result->{errors}->[1] != 0))
            {
                $report->{errors}++;
            }
            elsif ($result->{status} eq "run" and
                   $result->{todos}->[1] != 0)
            {
                $report->{todos}++;
            }
            if ($result->{status} !~ /^(?:dll missing|skipped)$/)
            {
                $report->{runs}++;
            }
        }
    }
    foreach my $report (@{$group->{reports}}) {
        $group->{successes}++ if !$report->{errors} && $report->{runs};
    }
}


#
# Write the data/BUILD/index*.html files
#

sub percent($$)
{
    my ($value, $base)=@_;
    return sprintf("%4.1f", 100 * $value / $base);
}

sub build_header_footer($)
{
    my ($reports)=@_;

    my $unit_count=scalar(keys %alltests);
    my ($title, $stats);
    foreach my $rep (@{$reports}) {
        my $report=$rep;
        my $msg;
        if (exists $report->{reports}) {
            my $report_count = @{$report->{reports}};
            if ($report_count > 1) {
                $msg = "        <a href=\"index_$report->{name}.html\">$report->{name}<br><small>$report_count reports</small></a>";
            } else {
                $report = $report->{reports}->[0];
            }
        } elsif (exists $report->{name}) {
            # Ignore groups with no reports
            next;
        }
        my $group = $report->{group};

        if (!defined $msg) {
            $msg = <<"EOF";
        $group->{name}<br><small>
        <a href=\"$report->{dir}/version.html\">$report->{tag}</a></small>
EOF
            chop $msg;
        }
        $title .=  <<"EOF";
      <th>
$msg
      </th>
EOF

        my $class = $report->{errors} ?
                      ($report->{successes} ? "mixed" : "fail") . ($report->{todos} ? " also-todo" : "") :
                    $report->{todos} ? "todo" :
                    "pass";
        my $count=!$report->{todos} ? $report->{errors} :
                  !$report->{errors} ? $report->{todos} :
                  "$report->{errors}+$report->{todos}";

        my $prcnt=!$report->{todos} ? percent($report->{errors}, $unit_count) :
                  !$report->{errors} ? percent($report->{todos}, $unit_count) :
                  (percent($report->{errors}, $unit_count) . "+" .
                   percent($report->{todos}, $unit_count));
        my $title = "$unit_count unit tests, $report->{errors} have errors";
        $title .= ", $report->{todos} have todos" if $report->{todos};

        $stats .= "      <th class=\"result $class\"><a title=\"$title\">$count<br>$prcnt\%</a></th>\n";
    }
    chop $title;
    chop $stats;
    return <<"EOF";
  <thead>
    <tr>
      <th class="test" colspan="2">platforms</th>
$title
    </tr>
    <tr>
      <th class="test" colspan="2">errors</th>
$stats
      <th class="test"></th>
    </tr>
  </thead>
  <tfoot>
    <tr>
      <th class="test" colspan="2">errors</th>
$stats
      <th class="test"></th>
    </tr>
    <tr>
      <th class="test" colspan="2">platforms</th>
$title
    </tr>
  </tfoot>
EOF
}

my $header_footer=build_header_footer(\@groups);
my $short_build = substr($build,0,12);
my $short_date = short_date($date);

sub get_result_class($)
{
    my ($result) = @_;

    if ($result->{status} eq "run")
    {
        my $class = $result->{errors}->[0] ? "fail" :
                    $result->{errors}->[1] ? "mixed" :
                    $result->{todos}->[1] ? "todo" :
                    "pass";
        $class .= " also-todo" if ($result->{todos}->[1]);
        $class .= " also-skip" if ($result->{skips}->[1]);
        return "result $class";
    }
    if ($result->{status} eq "dll missing" or $result->{status} eq "skipped")
    {
        return "result pass also-skip";
    }
    return "note";
}

sub min_to_max($)
{
    my ($minmax)=@_;
    return $minmax->[0] if ($minmax->[0] == $minmax->[1]);
    return "$minmax->[0] to $minmax->[1]";
}

sub get_result_title($$)
{
    my ($testname, $result) = @_;

    if ($result->{status} eq "run")
    {
        my $mm_count=min_to_max($result->{count});
        my $mm_errors=min_to_max($result->{errors});
        my $mm_todos=min_to_max($result->{todos});
        my $mm_skips=min_to_max($result->{skips});
        my $title = "$mm_count tests, $mm_errors errors";
        $title .= ", $mm_todos todos" if ($mm_todos);
        $title .= ", $mm_skips skips" if ($mm_skips);
        return $title;
    }
    if ($result->{status} eq "dll missing")
    {
        my ($dll, $unit) = split(/:/, $testname);
        $dll.=".dll" if ($dll !~ /\./);
        return "No tests run as $dll is not present on this system";
    }
    if ($result->{status} eq "skipped") { return "Test skipped by user request"; }
    if ($result->{status} eq "filelimit") { return "Test is missing because of a partial report file"; }
    if ($result->{status} eq "missing") { return "Test did not run for an unknown reason"; }
    if ($result->{status} eq "mixed") { return "Mixed results"; }
    if ($result->{status} eq "crash") { return "Test crashed"; }
    if ($result->{status} eq "258") { return "Test timed out"; }
    return "";
}

# Output a single cell of a test
sub singletest($$$) {
    my ($group, $testname, $groupname) = @_;
    my $result = $group->{$testname};

    my ($msg, $prefix, $mouseover, $href);
    if ($group->{reports} and @{$group->{reports}} > 1)
    {
        $href = $result->{omit} ? "" : "index_$group->{name}.html#$testname";
        $prefix = $groupname;
    }
    else
    {
        my $report = $group->{reports} ? $group->{reports}->[0] : $group;
        $prefix = "$testname | $report->{tag}";
        if (-r "$builddir/$report->{dir}/$testname.html")
        {
            $href = "$report->{dir}/$testname.html";
        }
        else
        {
            $href="";
        }
    }

    my $class = get_result_class( $result );
    my $title = get_result_title( $testname, $result );

    my $status = $result->{status};
    if ($status eq "run")
    {
        if ($group->{reports} and @{$group->{reports}} > 1)
        {
            $title = sprintf "%u test runs, %s", $#{$group->{reports}} + 1, $title;
        }
        $msg=!$result->{todos}->[1] ? $result->{errors}->[1] :
             !$result->{errors}->[1] ? $result->{todos}->[1] :
             "$result->{errors}->[1]+$result->{todos}->[1]";
    }
    elsif ($status eq "dll missing")
    {
        $msg = "n/a";
    }
    elsif ($status eq "filelimit")
    {
        $msg = "truncated";
    }
    elsif ($status eq "missing")
    {
        $msg = "not&nbsp;run";
    }
    elsif ($status eq "skipped")
    {
        $msg = "skipped";
    }
    elsif ($status eq "mixed")
    {
        $msg = "mixed";
    }
    else
    {
        $msg = $status eq "crash" ? "crashed" :
               $status eq "258" ? "timeout": "failed";
    }
    $title = join(" | ", $prefix, $title);
    printf OUT "      <td class=\"%s\"><a %s %s>%s</a></td>\n",
                $class, $href ? "href=\"$href\"" : "",
                "title=\"$title\"", $msg;
    if ($group->{reports})
    {
        printf SUMMARY "%s %s <td class=\"%s\"><a %s %s>%s</a></td>\n",
                       $testname, $groupname, $class, $href ? "href=\"../$build/$href\"" : "",
                       "title=\"$title\"", $msg;
    }
}

sub test_links($$)
{
    my ($testname, $group) = @_;
    my $source = $alltests{$testname};
    return "<td class=\"links\"><a href=\"$gitweb/?a=history;f=$source;hb=$build\" title=\"$source change history\">history</a>" .
           "&nbsp;|&nbsp;<a href=\"$gitweb/?a=blob;f=$source;hb=$build\" title=\"$source source code\">source</a>" .
           (defined($group) ? "&nbsp;|&nbsp;<a href=\"index.html#$testname\" title=\"summary of $testname results across platforms\">summary</a>" : "") .
           "</td>";
}

sub write_build_index_and_summary($)
{
    my ($group) = @_;
    my ($group_name, $header_footer, $title, $filename);

    if (defined $group)
    {
        $group_name = $group->{name};
        $header_footer = build_header_footer($group->{reports});
        $title = "$short_date: $group_name results";
        $filename = "index_$group_name.html";
    }
    else
    {
        $group_name = "global";
        $header_footer = build_header_footer(\@groups);
        $title = "$short_date: Summary";
        $filename = "index.html";
    }

    my $idx_file = "$builddir/$filename";
    if (!open OUT, ">", "$idx_file.new") {
        error("could not open '$idx_file.new' for writing: $!\n");
        return;
    }

    print OUT <<"EOF";
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN"
                      "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
  <title>$title</title>
  <link rel="stylesheet" href="/summary.css" type="text/css">
  <meta http-equiv="Content-Type"
        content="text/html; charset=utf-8">
  <meta name="Author" content="gather">
  <meta http-equiv="Content-Script-Type" content="text/javascript">
</head>
<body>
EOF

    if (defined $group)
    {
        print OUT "<div class=\"navbar\">\n";
        print OUT "<a href=\"/site?testing=prev&amp;group=$group_name&amp;current=$build\">prev</a>";
        print OUT "&nbsp;|&nbsp;<a href=\"/site?testing=next&amp;group=$group_name&amp;current=$build\">next</a>";
        print OUT "&nbsp;|&nbsp;<a href=\".\">summary</a>";
        print OUT "&nbsp;|&nbsp;<a href=\"..\">index</a>\n";
        print OUT "</div>\n";
        print OUT "<div class=\"group\">\n";
        print OUT "<h1>$short_date: $group_name results for build <a href=\".\" title=\"$build\">$short_build</a></h1>\n";
        print OUT "<table class=\"report\">\n$header_footer\n  <tbody>\n";
    }
    else
    {
        print OUT "<div class=\"navbar\">\n";
        print OUT "<a href=\"/site?testing=prev&amp;current=$build\">prev</a>";
        print OUT "&nbsp;|&nbsp;<a href=\"/site?testing=next&amp;current=$build\">next</a>";
        print OUT "&nbsp;|&nbsp;<a href=\"..\">index</a>";
        print OUT "</div>\n";
        print OUT "<div class=\"main\">\n";
        print OUT "<h1>$short_date: Summary for build $short_build</h1>\n";
        print OUT "<table class=\"report\">\n$header_footer\n  <tbody>\n";
    }

    foreach my $testname (sort keys %alltests)
    {
        next if ($group && $group->{$testname}->{omit});
        my $source = $alltests{$testname};
        my $class = get_result_class( $test_results{$testname}->{$group_name} );
        my $title = get_result_title( $testname, $test_results{$testname}->{$group_name} );
        print OUT "    <tr>\n      <td class=\"test $class\">\n";
        print OUT "        <a href=\"../tests/$testname.html\" name=\"$testname\" title=\"$title\">$testname</a></td><td>&nbsp;</td>\n";
        if (defined $group)
        {
            foreach my $report (@{$group->{reports}}) {
                singletest($report, $testname, $group->{name});
            }
        }
        else
        {
            foreach my $group (@groups) {
                if (!exists $group->{reports}) {
                    # Do nothing
                } else {
                    singletest($group, $testname, $group->{name});
                }
            }
        }
        printf OUT "      %s\n    </tr>\n", test_links($testname, $group);
    }
    print OUT <<"EOF";
  </tbody>
</table>
</div>
<div class="legend">
<h3>Legend</h3>
<p class="legend">All tests <span class="result pass">pass</span> in all reports.</p>
<p class="legend">Some tests <span class="result mixed">fail</span> in some reports.</p>
<p class="legend">Some tests <span class="result fail">fail</span> in all reports.</p>
<p class="legend">This <span class="result pass also-skip">border</span> signals that some tests are skipped.</p>
<p class="legend">This <span class="result mixed also-todo">border</span> and this <span class="result todo">background</span> signal that the implementation needs some work.</p>
</div>
<div class="navbar">
To run the tests on your Windows machine, download the <a href="/builds/winetest-$short_build.exe">32-bit winetest</a>.
If you have a 64-bit Windows OS, you can also run the <a href="/builds/winetest64-$short_build.exe">64-bit winetest</a>.
</div>
</body>
</html>
EOF

    close OUT;
    if (!rename "$idx_file.new", "$idx_file")
    {
        error("could not move '$idx_file.new' into place: $!\n");
        unlink "$idx_file.new";
    }
}


#
# Write the data/BUILD/totals.txt file
# This provides the statistics for the main index page.
#

sub write_totals($)
{
    my ($reports)=@_;

    my $filename = "$builddir/total.txt";
    if (!open TOTAL, ">", "$filename.new")
    {
        error("could not open '$filename.new' for writing: $!\n");
        return;
    }
    my $unit_count=scalar(keys %alltests);
    foreach my $rep (@{$reports}) {
        my $report=$rep;
        my $report_count = 0;
        if (exists $report->{reports}) {
            $report_count = @{$report->{reports}};
            if ($report_count == 1) {
                $report = $report->{reports}->[0];
            }
        } elsif (exists $report->{name}) {
            # Ignore groups with no reports
            next;
        }
        printf TOTAL "%s %u %u %u %u %u\n", $report->{group}->{name}, $report_count, $unit_count, $report->{errors}, $report->{todos}, $report->{successes};
    }
    close TOTAL;
    if (!rename "$filename.new", "$filename")
    {
        error("could not move '$filename.new' into place: $!\n");
        unlink "$filename.new";
    }
}


#
# Actually generate the build's files
#

my $filename = "$builddir/summary.txt";
if (!open SUMMARY, ">", "$filename.new")
{
  error("could not open '$filename.new' for writing: $!\n");
  goto DONE;
}

# Take the groups with multiple reports
foreach my $group (@groups) {
    next unless exists $group->{reports} && @{$group->{reports}} > 1;
    write_build_index_and_summary( $group );
}

write_build_index_and_summary(undef);

close SUMMARY;
if (!rename "$filename.new", "$filename")
{
    error("could not move '$filename.new' into place: $!\n");
    unlink "$filename.new";
}

write_totals(\@groups);

DONE:
if (!unlink "$builddir/outdated" and !$!{ENOENT})
{
    error("unable to unlink '$builddir/outdated': $!\n");
    exit 3;
}
