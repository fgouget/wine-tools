1. WineTestBot server setup
---------------------------

Dependencies:
- Apache2 with mod_perl
- MySQL
- Perl DBD and DBI::mysql modules
- Sendmail
- Sys::Virt (libsys-virt-perl, see http://libvirt.org/)
- Image::Magick (perlmagick)
- Optional: IO::Socket::IP (for IPv6, libio-socket-ip-perl)
- Optional: Net::SSH2 (for SSH tunneling, libnet-ssh2-perl)

MySQL setup:
- Create a new 'winetestbot' database and its tables using the
  ddl/winetestbot.sql script.
- Make sure to change the 'winetestbot' user password. Typically:
    SET PASSWORD FOR 'winetestbot'@'localhost' = PASSWORD('mypassword');

Apache setup:
- Create a new virtual host, use doc/vhost_winetestbot.conf as a
  template.
- If you want to enable SSL, make sure you have your certificate set
  up. If you don't want SSL, edit lib/WineTestBot/Config.pm and set
  UseSSL to "!1".
- On openSUSE, I had to add "perl" to APACHE_MODULES in
  /etc/sysconfig/apache2.
- On Debian you may have to install libapache2-mod-perl2 and create a
  perl.load symbolic link in /etc/apache2/mods-enabled.

General setup for the web site:
- Create a new system group 'winehq' and a system user 'winehq',
  make sure to make user winehq a member of group winehq.
- Clone Wine's tools repository to $HOME/tools (so this document
  should be available as $HOME/tools/testbot/doc/INSTALL.txt).
- Create directory $HOME/tools/testbot/var, create subdirs
  'jobs', 'latest', 'socket' and 'staging' and a file called log within this
  directory. Set owner/group to wwwrun/winehq for staging (where 'wwwrun' is
  the account your apache server runs under). Run:
    cd $HOME/tools/testbot
    mkdir var
    cd var
    touch log
    mkdir jobs latest patches socket staging
    sudo chown WWWRUN:winehq staging
    chmod g+w *
- Install scripts/initd in /etc/init.d/winetestbot and adjust the paths and
  user name if necessary. Then activate it.
  (typically "chkconfig winetestbot on" or "service winetestbot start")
- Copy lib/WineTestBot/ConfigLocalTemplate.pl to ConfigLocal.pl in TestBot's
  root directory and fill in the options for your site.
- Restart Apache, you should now be able to browse to the home page.
- Register a new account for yourself.
- Using the mysql client, set the ResetCode in your Users entry to a
  known value, e.g.
    mysql> update Users set ResetCode = 'a' where Name = '<username>';
- Browse to http://server.name/ResetPassword.pl and enter your username,
  the resetcode you just updated and a new password.
- Make yourself admin by adding a row to UserRoles:
    mysql> insert into UserRoles values('<username>', 'admin');
- If you want to be able to submit jobs from the same account you will likely
  need to also give it the 'wine-devel' role:
    mysql> insert into UserRoles values('<username>', wine-devel);
- When you refresh the home page, you should now have an "Admin" menu
  in the sidebar.

Janitorial tasks:
- Run the Janitor.pl script once per day to perform the janitorial
  tasks. For instance:
    0 0 * * * $HOME/tools/testbot/bin/Janitor.pl
- Run the CheckWineTestBot.pl script periodically to get notified in
  case the WineTestBot server dies. For instance:
    */20 * * * * $HOME/tools/testbot/scripts/CheckWineTestBot.pl

Setup for Wine's patches site:
- Before trying to set this up make sure that you can submit patches
  using the WineTestBot web interface and that the results are sane.
  You may also want to run with $PatchFromEMailOverride set for a while
  to spot any issue under load.
- In $HOME/tools/testbot/var, set up the webpatches symbolic link to point to
  where the patches website stores its patches and test results. Typically:
    ln -s $HOME/patches $HOME/tools/testbot/var/webpatches
- Use a cron job to run WinePatchesWebSubmit.pl periodically. For instance:
    */5 * * * * $HOME/tools/testbot/bin/WinePatchesWebSubmit.pl

Setup for Winetest updates:
- Use a cron job to run CheckForWinetestUpdate.pl periodically. For
  instance:
    */10 * * * * $HOME/tools/testbot/bin/CheckForWinetestUpdate.pl 32
    */10 * * * * $HOME/tools/testbot/bin/CheckForWinetestUpdate.pl 64

Setup for wine-patches:
- A proper WineTestBot system should integrate with Wine's patches site.
  An alternative is to interface directly with wine-patches as described in
  this section.
- Arrange for the WinePatchesMLSubmit.pl script to be fed the
  wine-patches emails. One way to do so would be to subscribe the
  winehq user to the wine-patches mailing list and to then add the
  following lines to the .procmailrc file:
    :0c:
    * ^List-Id: Wine Patch Submissions
    * ^TO wine-patches
    | $HOME/tools/testbot/bin/WinePatchesMLSubmit.pl
- Or if you have a set of patches to test in the mbox format you can
  test with:
    formail -ds $HOME/tools/testbot/bin/WinePatchesMLSubmit.pl <mbox-file


2. VM hosts setup
-----------------

Dependencies:
- libvirtd (see http://libvirt.org/)
- A virtualization technology supported by libvirt, for instance
  QEmu/KVM, Xen, VirtualBox or VMware.


3. Wine build VM setup
----------------------

- Create a Linux VM and set it up so it can generate PE executables
  with MinGW. For instance on Debian you should install autoconf,
  bison, flex, gcc, gcc-mingw-w64, git and make. If you are going to
  have 64bit VMs then make sure MinGW can generate 64bit PE executables.
- You may also want to install ccache.
- You will also need genisoimage.
- Create a new user, 'testbot' for instance, and log in as that user.
- Clone Wine's tools repository to $HOME/tools (so this document
  should be available as $HOME/tools/testbot/doc/INSTALL.txt).
    git clone git://source.winehq.org/git/tools.git
- Create the $HOME/tools/testbot/var directory and clone the Wine git
  repository to wine:
    mkdir $HOME/tools/testbot/var
    cd $HOME/tools/testbot/var
    git clone git://source.winehq.org/git/wine.git
- Run $HOME/tools/testbot/bin/build/Reconfig.pl.
- Check $HOME/tools/testbot/var/Reconfig.log to make sure it succeeded. Fix
  issues until it works.
- Start the TestAgent server from the var directory:
    cd $HOME/tools/testbot/var && ../bin/build/testagentd PORT SRCHOST
  Where PORT is the $AgentPort that was configured in ConfigLocal.pl
  on the WineTestBot server, and SRCHOST is either omitted or the hostname
  of the WineTestBot server.
- Take a snapshot of the VM. The shorter the revert time the better. This
  usually implies taking a snapshot of the running VM as set up in the previous
  step. However it is also possible to use snapshots of the powered off VM. In
  that case make sure booting the VM will automatically start the TestAgent
  server in the right configuration.
- Register this VM as a build VM on the web site.


4. Windows test VM setup
------------------------

- Grab winetestbot.iso from the build VM.
- Add it to the Windows VM and copy the winetest directory to c:\winetest.
- Then remove the iso from the Windows VM again.
- Start the TestAgent server: TestAgentd PORT SRCHOST
  Where PORT is the $AgentPort that was configured in ConfigLocal.pl
  on the WineTestBot server, and SRCHOST is either omitted or the hostname
  of the WineTestBot server.
- Take a snapshot of the VM. The shorter the revert time the better. This
  usually implies taking a snapshot of the running VM as set up in the previous
  step. However it is also possible to use snapshots of the powered off VM. In
  that case make sure booting the VM will automatically log in and start the
  TestAgent server in the right configuration and with the appropriate
  privileges.
- Register this VM on the web site. On a production WineTestBot server
  you would likely want to make it an 'extra' VM until you have
  confirmed that it works as expected.
